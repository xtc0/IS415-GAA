---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R! ðŸ¥³"
execute:
  warning: false
date: "`r Sys.Date()`"
---

# 1.1 Getting Started

## 1.1.1 Installing and loading R packages

In this section, I will install and load tidyverse and sf packages.

```{r}
pacman::p_load(tidyverse, sf)
```

# 1.2 Importing Geospatial Data

## 1.2.1 Importing a polygon feature data in shapefile format

MP14_SUBZONE_WEB_PL is a polygon feature layer in ESRI shapefile format.

```{r}
mpsz <- st_read(dsn = "data/geospatial",
             layer = "MP14_SUBZONE_WEB_PL")
```
## 1.2.2 Importing a polyline feature data in shapefile format

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

## 1.2.3 Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/sportsg-dus-sport-facilities-kml.kml")
```

# 1.3 Checking the Content of A Simple Feature Data Frame
## 1.3.1 Working with st_geometry()

```{r}
st_geometry(mpsz)
```

## 1.3.2 Working with glimpse()

```{r}
glimpse(mpsz)
```

## 1.3.3 Working with head()

```{r}
head(mpsz, n=5) 
```

# 1.4 Plotting the Geospatial Data

```{r}
plot(mpsz)
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

# 1.5 Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

In this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.

## 1.5.1 Assigning EPSG code to a simple feature data frame


```{r}
st_crs(mpsz)
```

Using this function, we see that the ESPG code indicated is incorrect. For "SVY21" it should be 3414 but it's showing 9001.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

To assign the correct EPSG (European Petroleum Survey Group) code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk above.

```{r}
st_crs(mpsz3414)
```

## 1.5.2 Transforming the projection of preschool from wgs84 to svy21

```{r}
st_geometry(preschool)
```
We can see that the preschool data is in wgs84 coordinate system. Geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Time to reproject ```{r}preschool``` from one coordinate system to another.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

Let's display the content of preschool3414 sf data frame as shown below.

```{r}
st_geometry(preschool3414)
```

YAYY we have successfully converted preschool to preschool3414 (from wgs84 geographic coordinate system to svy21 projected coordinate system - suitable for distance-related measurements).

Notice that it is in svy21 projected coordinate system now. Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.

# 1.6 Importing and Converting An Aspatial Data

## 1.6.1 Importing the Aspatial Data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
list(listings) 
```

The code chunk above shows list() of Base R instead of glimpse() is used to do the job.

The output reveals that there are 4161 rows and 18 columns. 

Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.

## 1.6.2 Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

The code chunk above converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages.

Things to learn from the arguments above:

- coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.
- crs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other countryâ€™s epsg code by referring to epsg.io.
- %>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```

# 1.9 Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

## 1.9.1 Buffering

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

```{r}
sum(buffer_cycling$AREA)
```

## 1.9.2 Point-in-polygon count

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

The code chunk above performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
summary(mpsz3414$`PreSch Count`)
```

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk above.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# 1.10 Explorotary Data Analysis (EDA)

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

DIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

