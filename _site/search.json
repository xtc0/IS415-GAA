[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\nevents such as crime, traffic accident and disease onset, or business services (coffee and fastfood outlets) or facilities such as childcare and eldercare. Using appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\nare the childcare centres in Singapore randomly distributed throughout the country? if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#the-data",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "3.2 The Data",
    "text": "3.2 The Data\nTo provide answers to the questions above, three data sets will be used. They are:\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-loading-the-r-packages",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "3.3 Installing and Loading the R packages",
    "text": "3.3 Installing and Loading the R packages\nThere are 5 R packages used: - sf - spatstat - raster - maptools - tmap\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#spatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#spatial-data-wrangling",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "3.4 Spatial Data Wrangling",
    "text": "3.4 Spatial Data Wrangling"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#survival-tip",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#survival-tip",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.1.1 Survival Tip",
    "text": "2.1.1 Survival Tip\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.3 Importing Data",
    "text": "2.3 Importing Data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-data",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.3.1 The Data",
    "text": "2.3.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-into-r",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.3.2 Importing Geospatial Data into R",
    "text": "2.3.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz <- st_read(dsn = \"chap02/data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/Hands-on_Ex/Hands-on_Ex02/chap02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-a-polygon-feature-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-a-polygon-feature-data-in-shapefile-format",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.2.1 Importing a polygon feature data in shapefile format",
    "text": "1.2.1 Importing a polygon feature data in shapefile format\nMP14_SUBZONE_WEB_PL is a polygon feature layer in ESRI shapefile format.\n\nmpsz <- st_read(dsn = \"data/geospatial\",\n             layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-a-polyline-feature-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-a-polyline-feature-data-in-shapefile-format",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.2.2 Importing a polyline feature data in shapefile format",
    "text": "1.2.2 Importing a polyline feature data in shapefile format\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.2.3 Importing GIS data in kml format",
    "text": "1.2.3 Importing GIS data in kml format\n\npreschool = st_read(\"data/geospatial/sportsg-dus-sport-facilities-kml.kml\")\n\nReading layer `SPORTSG_DUS_SPORT_FACILITIES' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/sportsg-dus-sport-facilities-kml.kml' \n  using driver `KML'\nSimple feature collection with 183 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6872 ymin: 1.274962 xmax: 103.9628 ymax: 1.456667\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-st_geometry",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-st_geometry",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.3.1 Working with st_geometry()",
    "text": "1.3.1 Working with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-glimpse",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-glimpse",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.3.2 Working with glimpse()",
    "text": "1.3.2 Working with glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-head",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-head",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.3.3 Working with head()",
    "text": "1.3.3 Working with head()\n\nhead(mpsz, n=5) \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.5.1 Assigning EPSG code to a simple feature data frame",
    "text": "1.5.1 Assigning EPSG code to a simple feature data frame\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nUsing this function, we see that the ESPG code indicated is incorrect. For “SVY21” it should be 3414 but it’s showing 9001.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nTo assign the correct EPSG (European Petroleum Survey Group) code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk above.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.5.2 Transforming the projection of preschool from wgs84 to svy21",
    "text": "1.5.2 Transforming the projection of preschool from wgs84 to svy21\n\nst_geometry(preschool)\n\nGeometry set for 183 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6872 ymin: 1.274962 xmax: 103.9628 ymax: 1.456667\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nWe can see that the preschool data is in wgs84 coordinate system. Geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nTime to reproject {r}preschool from one coordinate system to another.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n\nLet’s display the content of preschool3414 sf data frame as shown below.\n\nst_geometry(preschool3414)\n\nGeometry set for 183 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11739.27 ymin: 28604.3 xmax: 42410.51 ymax: 48696.35\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nYAYY we have successfully converted preschool to preschool3414 (from wgs84 geographic coordinate system to svy21 projected coordinate system - suitable for distance-related measurements).\nNotice that it is in svy21 projected coordinate system now. Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.6.1 Importing the Aspatial Data",
    "text": "1.6.1 Importing the Aspatial Data\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\n\nlist(listings) \n\n[[1]]\n# A tibble: 4,161 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   145\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 5 275344 15 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 6 289234 Booking…  367042 Belinda East R… Tampin…    1.34    104. Privat…   184\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n 8 324945 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 9 330089 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n10 330095 10 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n# … with 4,151 more rows, 8 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>,\n#   number_of_reviews_ltm <dbl>, license <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\nThe code chunk above shows list() of Base R instead of glimpse() is used to do the job.\nThe output reveals that there are 4161 rows and 18 columns.\nTwo useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.6.2 Creating a simple feature data frame from an aspatial data frame",
    "text": "1.6.2 Creating a simple feature data frame from an aspatial data frame\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n\nThe code chunk above converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages.\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <dbl> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <date> 2014-12-26, 2020-01-17, 2019-10-13, 20…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <dbl> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <dbl> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, NA, \"S0399\", NA, NA, \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.9.1 Buffering",
    "text": "1.9.1 Buffering\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nst_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R! 🥳",
    "section": "1.9.2 Point-in-polygon count",
    "text": "1.9.2 Point-in-polygon count\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\nThe code chunk above performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.5666  1.0000  7.0000 \n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 2 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 39726.28\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2   TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n2      246          5 PASIR RIS DRIVE    PRSZ05      N  PASIR RIS         PR\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n2 EAST REGION       ER 2B73597AF3F174F3 2014-12-05 42032.46 38988.22    5311.06\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...            7\n2    1639669 MULTIPOLYGON (((42832.87 38...            7\n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk above.\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class_Ex05",
    "section": "",
    "text": "Importing Data\n\npacman::p_load(tidyverse, sf, sfdep, tmap)\n\n\nstudyArea <- st_read(dsn = \"data\", layer=\"study_area\") %>% st_transform(crs = 3829)\n\nReading layer `study_area' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/In-class_Ex/In-class_Ex05/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores <- st_read(dsn = \"data\", layer=\"stores\") %>% st_transform(crs = 3829)\n\nReading layer `stores' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/In-class_Ex/In-class_Ex05/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n\n\nVisualising the sf layers\n\ntmap_mode(\"view\")\ntm_shape(studyArea) + \n  tm_polygons() + \ntm_shape(stores) + \n  tm_dots(col = \"Name\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) + \n  tm_view(set.zoom.limits = c(12,16))\n\n\n\n\n\n\n\n\nLocal Colocation Quotients (LCLQ)\n\nnb <- include_self(\n  st_knn(st_geometry(stores), 6)\n) #choose 6 and include yourself so total is 7. In the end, you'll get 3 and 4 so no even split which is good\n\nwt <- st_kernel_weights(nb,\n                        stores,\n                        \"gaussian\",\n                        adaptive = TRUE)\n\nFamilyMart <- stores %>%\n  filter(Name == \"Family Mart\") #select out all the stores with the name \"Family Mart as dataframe\nA <- FamilyMart$Name\n\nSevenEleven <- stores %>%\n  filter(Name == \"7-Eleven\")\nB <- SevenEleven$Name\n\nLCLQ <- local_colocation(A, B, nb, wt, 49)\n#now all the parameter values you have\n#A is target\n#B is the neighbour i want to find if A is colocated with it\n\nLCLQ_stores <- cbind(stores, LCLQ)\n#doing a combination: LCLQ is appended over to stores. Cannot do a relational join coz these 2 layers have no unique identifier (only 1,2,3,4...)\n\n#LHS should be store coz we want the geometry. Will always inherit the property of the first value.\n\ntmap_mode(\"view\")\n\nPls make sure to check the number of events. Should be 1409.\nIn in-class exercise 5, we saw the graph and now we’re learning how to deal with colocation.\nColocation quotient and pvalue - please find yourself."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3: Analytical Mapping",
    "section": "",
    "text": "pacman::p_load(tmap, tidyverse, sf)\n\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n3 Basic Choropleth Mapping\n\n\n3.1 Visualising Distribution of Non-functional Water Point\n\np1 <- tm_shape(NGA_wp) + \n  tm_fill(\"wp_functional\", \n          n=10,\n          style = \"equal\",\n          palette = \"Blues\") + \n  tm_borders(lwd = 0.1,\n             alpha = 1) + \n  tm_layout(main.title = \"Distribution of functional water by LGAs\",\n            legend.outside = FALSE)\n\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            legend.outside = FALSE)\n\nFor palette, it should be “Reds”, “Blues” not “Red”, “Blue”.\n\ntmap_arrange(p2, p1, nrow=1)\n\n\n\n\n\n\n4 Choropleth Map for Rates\n\n\n4.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points\nWhen you change from xxx to %, you will realise that…\n\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\nIn the code chunk above, mutate() from dplyr package is used to derive 2 fields, namely pct_functional and pct_nonfunctional.\n\n\n4.2 Plotting Map of Rate\n\ntm_shape(NGA_wp) + \n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n              alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)\n\n\n\n\n\n\n5 Extreme Value Maps\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n\n5.1 Percentile Map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n\n5.1.1 Data Preparation\nStep 1: Exclude records with NA by using the code chunk below.\n\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values.\n\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n5.1.2 Why Write Functions?\nHas 3 big advantages over copy-and-paste:\n\nCan give function an evocative name that makes your code easier to understand.\nWhen requirements change, you only need to update code in 1 place.\nEliminate the chance of making incidental mistakes when copying and pasting.\n\n\n\n5.1.3 Creating the get.var function\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var <- function(vname,df) {\n  v <- df[vname] %>% \n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\n\n\n5.1.4 A Percentile Mapping Function\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n5.1.5 Test drive the percentile mapping function\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n5.2 Box Map\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\nDisplaying summary statistics on a choropleth map by using the basic principles of boxplot.\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\n\n5.2.1 Creating the boxbreaks function\n\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n\n\n\n5.2.2 Creating the get.var function\n\nget.var <- function(vname,df) {\n  v <- df[vname] %>% st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\n\n\n5.2.3 Test the newly created function\n\nvar <- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n5.2.4 Boxmap function\n\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nboxmap(\"wp_nonfunctional\", NGA_wp)\n\nWarning: Breaks contains positive and negative values. Better is to use\ndiverging scale instead, or set auto.palette.mapping to FALSE.\n\n\n\n\n\n\n\n5.2.5 Recode zero\nThe code chunk below is used to recode LGAs with zero total water point into NA.\n\nNGA_wp <- NGA_wp %>%\n  mutate(wp_functional = na_if(\n    total_wp, total_wp < 0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Getting Started\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)\n\nThings to learn from this code chunk.\nImporting Data\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/In-class_Ex/In-class_Ex04/data/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/In-class_Ex/In-class_Ex04/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/In-class_Ex/In-class_Ex04/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nMapping The Geospatial Dataset\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\nGeospatial Data Wrangling\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "href": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/stores.html",
    "href": "In-class_Ex/In-class_Ex05/data/stores.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2: Geospatial Data Wrangling! 🌝",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#objectives",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#objectives",
    "title": "In-class Exercise 2: Geospatial Data Wrangling! 🌝",
    "section": "Objectives",
    "text": "Objectives\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate geospatial data wrangling methods to prepare the data for water point mapping study. For the purpose of this study, Nigeria will be used as the study country."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#the-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#the-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling! 🌝",
    "section": "The Data",
    "text": "The Data\n\nAspatial Data\nFor the purpose of this assignment, data from WPdx Global Data Repositories will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.\n\n\nGeospatial data\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#the-task",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#the-task",
    "title": "In-class Exercise 2: Geospatial Data Wrangling! 🌝",
    "section": "The Task",
    "text": "The Task\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nVisualising the distribution of water point by using appropriate analytical visualisation methods."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#getting-started",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#getting-started",
    "title": "In-class Exercise 2: Geospatial Data Wrangling! 🌝",
    "section": "Getting Started",
    "text": "Getting Started\nFor the purpose of this in-class exercise, three R packages will be used. They are: sf, tidyverse and funModeling.\n\npacman::p_load(sf, tidyverse, funModeling)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-geospatial",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-geospatial",
    "title": "In-class Exercise 2: Geospatial Data Wrangling! 🌝",
    "section": "Importing Geospatial",
    "text": "Importing Geospatial\nThe geoBoundaries data set\n\ngeoNGA <- st_read(\"data/geospatial/\",\n                  layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/In-class_Ex/In-class_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nThe NGA data set\n\nNGA <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/In-class_Ex/In-class_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling! 🌝",
    "section": "Importing Aspatial Data",
    "text": "Importing Aspatial Data\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\nWrite the extracted data into rds format"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#converting-aspatial-data-into-geospatial",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#converting-aspatial-data-into-geospatial",
    "title": "In-class Exercise 2: Geospatial Data Wrangling! 🌝",
    "section": "Converting Aspatial Data into Geospatial",
    "text": "Converting Aspatial Data into Geospatial\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)\n\nYashica’s notes\nWhenever you work with aspatial data, must turn it into geospatial data. 1) Have to convert to correct data type + 2) the original coordinate system first (before converting to the coordinate system u want)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#task-using-appropriate-tidyr-and-dplyr-methods-derive-the-proportion-of-functional-and-non-functional-water-point-at-lga-level.",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#task-using-appropriate-tidyr-and-dplyr-methods-derive-the-proportion-of-functional-and-non-functional-water-point-at-lga-level.",
    "title": "In-class Exercise 2: Geospatial Data Wrangling! 🌝",
    "section": "Task: Using appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.",
    "text": "Task: Using appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nThere are 3 basic geometric primitives - points, lines and polygons.\nfunctional/total non-functional/total\n\ngeoNGAint<- lengths(st_intersects(geoNGA, wp_sf))\n\n\ngeoNGAint<- lengths(st_intersects(\"Functional\", wp_sf[\"status_clean\"]))\n\n\nsummary(geoNGAint)"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\n\n\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate geospatial data wrangling methods to prepare the data for water point mapping study. For the purpose of this study, Nigeria will be used as the study country."
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#packages-used",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#packages-used",
    "title": "Take-home Exercise 1",
    "section": "2.1 Packages Used",
    "text": "2.1 Packages Used\n\nsf\ntidyverse\nspatstat\nraster\ntmap\nmaptools\nrgdal\nkableExtra\nplotly\nggthemes\nonemapsapi"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#tidyverse-packages-used",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#tidyverse-packages-used",
    "title": "Take-home Exercise 1",
    "section": "2.2 Tidyverse Packages Used",
    "text": "2.2 Tidyverse Packages Used\nMoreover, the following tidyverse packages will be used:\n\nreadr for importing delimited files (.csv)\ntidyr for manipulating and tidying data\ndplyr for wrangling and transforming data\nggplot2 for visualising data"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#importing-geospatial-data",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#importing-geospatial-data",
    "title": "Take-home Exercise 1",
    "section": "3.1 Importing Geospatial Data",
    "text": "3.1 Importing Geospatial Data\n\npacman::p_load(sf, tidyverse, funModeling)\n\n\ngeoNGA <- st_read(\"data/geospatial/\",\n                  layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/Take-home_Ex/Take_home_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nNGA <- st_read(\"data/geospatial/\",\n                  layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `/Users/yashica/Desktop/xtc0/IS415-GAA/Take-home_Ex/Take_home_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nNow, we’ll be looking at Osun State in Nigeria for our analysis.\n\nosunNGA <- NGA %>% filter(NGA$ADM1_EN == \"Osun\")\nosunNGA\n\nSimple feature collection with 30 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 176503.2 ymin: 331434.7 xmax: 291043.8 ymax: 454520.1\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 10 features:\n   Shape_Leng  Shape_Area        ADM2_EN ADM2_PCODE       ADM2_REF ADM2ALT1EN\n1   1.7951405 0.062436080       Aiyedade   NG030001       Aiyedade       <NA>\n2   0.7101503 0.024818478       Aiyedire   NG030002       Aiyedire       <NA>\n3   0.9199564 0.038002894 Atakumosa East   NG030003 Atakumosa East       <NA>\n4   0.8502782 0.030445804 Atakumosa West   NG030004 Atakumosa West       <NA>\n5   0.5212768 0.012213340     Boluwaduro   NG030005     Boluwaduro       <NA>\n6   0.6088930 0.011827501         Boripe   NG030006         Boripe       <NA>\n7   0.4714403 0.008343638      Ede North   NG030007      Ede North       <NA>\n8   0.5660235 0.017623677      Ede South   NG030008      Ede South       <NA>\n9   0.8273123 0.022026327       Egbedore   NG030009       Egbedore       <NA>\n10  1.1304849 0.029791275         Ejigbo   NG030010         Ejigbo       <NA>\n   ADM2ALT2EN ADM1_EN ADM1_PCODE ADM0_EN ADM0_PCODE       date    validOn\n1        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n2        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n3        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n4        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n5        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n6        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n7        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n8        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n9        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n10       <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n   validTo        SD_EN SD_PCODE                       geometry\n1     <NA>    Osun West  NG03003 MULTIPOLYGON (((213526.6 34...\n2     <NA>    Osun West  NG03003 MULTIPOLYGON (((212542.6 40...\n3     <NA>    Osun East  NG03002 MULTIPOLYGON (((265746.8 37...\n4     <NA>    Osun East  NG03002 MULTIPOLYGON (((248871.4 40...\n5     <NA> Osun Central  NG03001 MULTIPOLYGON (((266092.2 43...\n6     <NA> Osun Central  NG03001 MULTIPOLYGON (((255072.5 43...\n7     <NA>    Osun West  NG03003 MULTIPOLYGON (((236386.9 41...\n8     <NA>    Osun West  NG03003 MULTIPOLYGON (((236386.9 41...\n9     <NA>    Osun West  NG03003 MULTIPOLYGON (((220756 4317...\n10    <NA>    Osun West  NG03003 MULTIPOLYGON (((214422.1 42..."
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#importing-aspatial-data",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#importing-aspatial-data",
    "title": "Take-home Exercise 1",
    "section": "3.2 Importing Aspatial Data",
    "text": "3.2 Importing Aspatial Data\n\n3.2.1 Filtering Aspatial Data\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\") %>%\n  filter(`#clean_adm1` == \"Osun\")\n\n\n\n3.2.2 Converting Aspatial Data Into Geospatial\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 5557 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.032004 ymin: 7.060309 xmax: 5.06 ymax: 8.061898\nGeodetic CRS:  WGS 84\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)\n\n\nwp_sf <- wp_sf %>%\n  filter(`#clean_country_name` == \"Nigeria\") %>%\n  filter(`#clean_adm1` == \"Osun\")"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#section",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#section",
    "title": "Take-home Exercise 1",
    "section": "4.3",
    "text": "4.3"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#excluding-redundant-fields",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#excluding-redundant-fields",
    "title": "Take-home Exercise 1",
    "section": "4.1 Excluding Redundant Fields",
    "text": "4.1 Excluding Redundant Fields\nLooking through the osunNGA dataframe, we can conclude that there are NO redundant fields."
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#checking-for-duplicate-values-in-columns",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#checking-for-duplicate-values-in-columns",
    "title": "Take-home Exercise 1",
    "section": "4.2 Checking For Duplicate Values In Columns",
    "text": "4.2 Checking For Duplicate Values In Columns\nIt is always important to check for duplicate name in the data main data fields. Using duplicated() of Base R, we can flag out LGA names that might be duplicated as shown in the code chunk below.\n\nosunNGA$ADM2_EN[duplicated(osunNGA$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\nGreat! There are no duplicate values in the column “ADM2_EN”."
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#extracting-water-point-data",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#extracting-water-point-data",
    "title": "Take-home Exercise 1",
    "section": "5.1 Extracting Water Point Data",
    "text": "5.1 Extracting Water Point Data\nThis code chunk below extracts functional water points.\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nThis code chunk below extracts non-functional water points.\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\nThe code chunk below is used to extract water point with unknown status.\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\nNext, the code chunk below is used to perform a quick EDA on the derived sf data.frames.\n\nfreq(data = wp_functional,\n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional      2319      88.17           88.17\n2 Functional but needs repair       248       9.43           97.60\n3   Functional but not in use        63       2.40          100.00\n\n\n\nfreq(data = wp_nonfunctional,\n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional      2008      92.15           92.15\n2 Non-Functional due to dry season       151       6.93           99.08\n3                        Abandoned        15       0.69           99.77\n4         Abandoned/Decommissioned         5       0.23          100.00\n\n\n\nfreq(data = wp_unknown,\n     input = 'status_clean')\n\n\n\n\n  status_clean frequency percentage cumulative_perc\n1      unknown       748        100             100"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#performing-point-in-polygon-count",
    "title": "Take-home Exercise 1",
    "section": "5.2 Performing Point-In-Polygon Count",
    "text": "5.2 Performing Point-In-Polygon Count"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#converting-sf-dataframes-to-sps-spatial-class",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#converting-sf-dataframes-to-sps-spatial-class",
    "title": "Take-home Exercise 1",
    "section": "7.1 Converting sf Dataframes to sp’s Spatial Class",
    "text": "7.1 Converting sf Dataframes to sp’s Spatial Class\n\nwp_functional\n\nSimple feature collection with 2630 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 177285.9 ymin: 343128.1 xmax: 290751 ymax: 450859.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 2,630 × 2\n   status_clean                           Geometry\n * <chr>                               <POINT [m]>\n 1 Functional but needs repair   (212810 386707.6)\n 2 Functional                  (228798.9 403822.5)\n 3 Functional                  (270497.9 377476.9)\n 4 Functional                    (212202 349210.1)\n 5 Functional                  (259331.9 399591.4)\n 6 Functional                    (195484 404733.2)\n 7 Functional                  (221302.3 389473.6)\n 8 Functional but not in use   (263254.1 382692.9)\n 9 Functional                    (192484.1 405113)\n10 Functional                      (252736 373593)\n# … with 2,620 more rows\n\n\n\nwp_nonfunctional\n\nSimple feature collection with 2179 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 180539 ymin: 340054.1 xmax: 290616 ymax: 450780.1\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 2,179 × 2\n   status_clean                        Geometry\n * <chr>                            <POINT [m]>\n 1 Abandoned/Decommissioned (260303.8 368418.2)\n 2 Abandoned/Decommissioned   (236239.7 417577)\n 3 Abandoned/Decommissioned (244631.9 447614.1)\n 4 Abandoned/Decommissioned (252887.8 432017.8)\n 5 Abandoned/Decommissioned (202912.5 390196.1)\n 6 Abandoned                (203615.2 438277.3)\n 7 Abandoned                (255213.6 401175.9)\n 8 Abandoned                  (255869 398845.1)\n 9 Abandoned                  (254321.8 437453)\n10 Abandoned                (201613.1 436132.1)\n# … with 2,169 more rows\n\n\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nwp_functional_spatial <- as_Spatial(wp_functional)\nwp_nonfunctional_spatial <- as_Spatial(wp_nonfunctional)\nosunNGA_spatial <- as_Spatial(osunNGA)\n\n\nwp_functional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :              status_clean \nmin values  :                Functional \nmax values  : Functional but not in use \n\n\n\nwp_nonfunctional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :                     status_clean \nmin values  :                        Abandoned \nmax values  : Non-Functional due to dry season \n\n\n\nosunNGA_spatial\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 16\nnames       :    Shape_Leng,       Shape_Area,  ADM2_EN, ADM2_PCODE, ADM2_REF, ADM2ALT1EN, ADM2ALT2EN, ADM1_EN, ADM1_PCODE, ADM0_EN, ADM0_PCODE,  date, validOn, validTo,        SD_EN, ... \nmin values  : 0.26445678806, 0.00248649736648, Aiyedade,   NG030001, Aiyedade,         NA,         NA,    Osun,      NG030, Nigeria,         NG, 17134,   18003,      NA, Osun Central, ... \nmax values  :  1.8470166597,  0.0737271661922,   Osogbo,   NG030030,   Osogbo,         NA,         NA,    Osun,      NG030, Nigeria,         NG, 17134,   18003,      NA,    Osun West, ..."
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Take-home Exercise 1",
    "section": "7.2 Converting the Spatial* class into generic sp format",
    "text": "7.2 Converting the Spatial* class into generic sp format\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first. The codes chunk below converts the Spatial* classes into generic sp objects.\n\nwp_functional_spatial_sp <- as(wp_functional_spatial, \"SpatialPoints\")\n\nwp_nonfunctional_spatial_sp <- as(wp_nonfunctional_spatial, \"SpatialPoints\")\n\nosunNGA_spatial_sp <- as(osunNGA_spatial, \"SpatialPolygons\")\n\nNext, you should display the sp objects properties as shown below.\n\nwp_functional_spatial_sp\n\nclass       : SpatialPoints \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nwp_nonfunctional_spatial_sp\n\nclass       : SpatialPoints \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nosunNGA_spatial_sp\n\nclass       : SpatialPolygons \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Take-home Exercise 1",
    "section": "7.3 Converting the generic sp format into spatstat’s ppp format",
    "text": "7.3 Converting the generic sp format into spatstat’s ppp format\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nwp_functional_spatial_ppp <- as(wp_functional_spatial_sp, \"ppp\")\n\nwp_functional_spatial_ppp\n\nPlanar point pattern: 2630 points\nwindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n\n\n\nwp_nonfunctional_spatial_ppp <- as(wp_nonfunctional_spatial_sp, \"ppp\")\n\nwp_nonfunctional_spatial_ppp\n\nPlanar point pattern: 2179 points\nwindow: rectangle = [180538.96, 290616] x [340054.1, 450780.1] units\n\n\nLet us plot wp_functional_spatial_ppp and examine the difference.\n\nplot(wp_functional_spatial_ppp)\n\n\n\n\nNow, let’s plot wp_nonfunctional_spatial_ppp.\n\nplot(wp_nonfunctional_spatial_ppp)\n\n\n\n\nYou can take a quick look at the summary statistics of the newly created ppp objects by using the code chunk below.\n\nsummary(wp_functional_spatial_ppp)\n\nPlanar point pattern:  2630 points\nAverage intensity 2.151545e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n                    (113500 x 107700 units)\nWindow area = 12223800000 square units\n\n\n\nsummary(wp_nonfunctional_spatial_ppp)\n\nPlanar point pattern:  2179 points\nAverage intensity 1.787766e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [180538.96, 290616] x [340054.1, 450780.1] units\n                    (110100 x 110700 units)\nWindow area = 12188400000 square units"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#handling-duplicated-points",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#handling-duplicated-points",
    "title": "Take-home Exercise 1",
    "section": "7.4 Handling Duplicated Points",
    "text": "7.4 Handling Duplicated Points\n\nany(duplicated(wp_functional_spatial_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(wp_nonfunctional_spatial_ppp))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#creating-owin-object",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#creating-owin-object",
    "title": "Take-home Exercise 1",
    "section": "7.5 Creating owin Object",
    "text": "7.5 Creating owin Object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Osun State boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nosun_owin <- as(osunNGA_spatial_sp, \"owin\")\n\n\nplot(osun_owin)\n\n\n\n\n\nsummary(osun_owin)\n\nWindow: polygonal boundary\n30 separate polygons (no holes)\n            vertices      area relative.area\npolygon 1        204 766084000       0.08870\npolygon 2         81 304399000       0.03520\npolygon 3         97 465688000       0.05390\npolygon 4        124 373051000       0.04320\npolygon 5         60 149473000       0.01730\npolygon 6         84 144820000       0.01680\npolygon 7         50 102243000       0.01180\npolygon 8         72 216002000       0.02500\npolygon 9        112 269897000       0.03130\npolygon 10       125 365142000       0.04230\npolygon 11        83 111191000       0.01290\npolygon 12       126 192557000       0.02230\npolygon 13       219 904397000       0.10500\npolygon 14       174 741131000       0.08580\npolygon 15        81 138742000       0.01610\npolygon 16        65 119452000       0.01380\npolygon 17        90 280205000       0.03240\npolygon 18        69  69814600       0.00808\npolygon 19        69  42727500       0.00495\npolygon 20        49  30458800       0.00353\npolygon 21        62 263505000       0.03050\npolygon 22        93 438930000       0.05080\npolygon 23        87 274127000       0.03170\npolygon 24       105 509979000       0.05910\npolygon 25        98 292058000       0.03380\npolygon 26        64 327765000       0.03800\npolygon 27       133 108945000       0.01260\npolygon 28       122 462169000       0.05350\npolygon 29        94 109715000       0.01270\npolygon 30        95  61239800       0.00709\nenclosing rectangle: [176503.22, 291043.82] x [331434.7, 454520.1] units\n                     (114500 x 123100 units)\nWindow area = 8635910000 square units\nFraction of frame area: 0.613"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#combining-point-events-object-and-owin-object",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#combining-point-events-object-and-owin-object",
    "title": "Take-home Exercise 1",
    "section": "7.6 Combining Point Events Object and Owin Object",
    "text": "7.6 Combining Point Events Object and Owin Object\nFirst, let’s combine wp_functional_spatial_ppp points with osun_owin.\n\nwp_functional_osun_ppp = wp_functional_spatial_ppp[osun_owin]\n\n\nsummary(wp_functional_osun_ppp)\n\nPlanar point pattern:  2529 points\nAverage intensity 2.928471e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: polygonal boundary\n30 separate polygons (no holes)\n            vertices      area relative.area\npolygon 1        204 766084000       0.08870\npolygon 2         81 304399000       0.03520\npolygon 3         97 465688000       0.05390\npolygon 4        124 373051000       0.04320\npolygon 5         60 149473000       0.01730\npolygon 6         84 144820000       0.01680\npolygon 7         50 102243000       0.01180\npolygon 8         72 216002000       0.02500\npolygon 9        112 269897000       0.03130\npolygon 10       125 365142000       0.04230\npolygon 11        83 111191000       0.01290\npolygon 12       126 192557000       0.02230\npolygon 13       219 904397000       0.10500\npolygon 14       174 741131000       0.08580\npolygon 15        81 138742000       0.01610\npolygon 16        65 119452000       0.01380\npolygon 17        90 280205000       0.03240\npolygon 18        69  69814600       0.00808\npolygon 19        69  42727500       0.00495\npolygon 20        49  30458800       0.00353\npolygon 21        62 263505000       0.03050\npolygon 22        93 438930000       0.05080\npolygon 23        87 274127000       0.03170\npolygon 24       105 509979000       0.05910\npolygon 25        98 292058000       0.03380\npolygon 26        64 327765000       0.03800\npolygon 27       133 108945000       0.01260\npolygon 28       122 462169000       0.05350\npolygon 29        94 109715000       0.01270\npolygon 30        95  61239800       0.00709\nenclosing rectangle: [176503.22, 291043.82] x [331434.7, 454520.1] units\n                     (114500 x 123100 units)\nWindow area = 8635910000 square units\nFraction of frame area: 0.613\n\n\nNow, let’s combine wp_nonfunctional_spatial_ppp points with osun_owin.\n\nwp_nonfunctional_osun_ppp = wp_nonfunctional_spatial_ppp[osun_owin]\n\n\nsummary(wp_nonfunctional_osun_ppp)\n\nPlanar point pattern:  2059 points\nAverage intensity 2.384232e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: polygonal boundary\n30 separate polygons (no holes)\n            vertices      area relative.area\npolygon 1        204 766084000       0.08870\npolygon 2         81 304399000       0.03520\npolygon 3         97 465688000       0.05390\npolygon 4        124 373051000       0.04320\npolygon 5         60 149473000       0.01730\npolygon 6         84 144820000       0.01680\npolygon 7         50 102243000       0.01180\npolygon 8         72 216002000       0.02500\npolygon 9        112 269897000       0.03130\npolygon 10       125 365142000       0.04230\npolygon 11        83 111191000       0.01290\npolygon 12       126 192557000       0.02230\npolygon 13       219 904397000       0.10500\npolygon 14       174 741131000       0.08580\npolygon 15        81 138742000       0.01610\npolygon 16        65 119452000       0.01380\npolygon 17        90 280205000       0.03240\npolygon 18        69  69814600       0.00808\npolygon 19        69  42727500       0.00495\npolygon 20        49  30458800       0.00353\npolygon 21        62 263505000       0.03050\npolygon 22        93 438930000       0.05080\npolygon 23        87 274127000       0.03170\npolygon 24       105 509979000       0.05910\npolygon 25        98 292058000       0.03380\npolygon 26        64 327765000       0.03800\npolygon 27       133 108945000       0.01260\npolygon 28       122 462169000       0.05350\npolygon 29        94 109715000       0.01270\npolygon 30        95  61239800       0.00709\nenclosing rectangle: [176503.22, 291043.82] x [331434.7, 454520.1] units\n                     (114500 x 123100 units)\nWindow area = 8635910000 square units\nFraction of frame area: 0.613"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#kernel-density-estimation",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#kernel-density-estimation",
    "title": "Take-home Exercise 1",
    "section": "8.1 Kernel Density Estimation",
    "text": "8.1 Kernel Density Estimation\nIn this section, you will learn how to compute the kernel density estimation (KDE) of functional and non-functional waterpoints in Osun State.\n\n8.1.1 Computing kernel density estimation using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\n\nWe’re computing the kernel density for the functional waterpoints in Osun state.\n\nkde_functional_osun_bw <- density(wp_functional_osun_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nThe plot() function of Base R is then used to display the kernel density derived.\n\nplot(kde_functional_osun_bw)\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nWe’re now computing the kernel density for the non-functional waterpoints in Osun state.\n\nkde_nonfunctional_osun_bw <- density(wp_nonfunctional_osun_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_nonfunctional_osun_bw)\n\n\n\n\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.\n\nfunc_bw <- bw.diggle(wp_functional_osun_ppp)\nfunc_bw\n\n   sigma \n252.1687 \n\n\n\nnonfunc_bw <- bw.diggle(wp_nonfunctional_osun_ppp)\nnonfunc_bw\n\n   sigma \n308.2061 \n\n\n\n\n8.1.2 Rescalling KDE values\nIn the code chunk below, rescale() is used to covert the unit of measurement from meter to kilometer.\n\nwp_functional_osun_ppp.km <- rescale(wp_functional_osun_ppp, 1000, \"km\")\n\nWe’ll do rescaling for the functional waterpoints in Osun first.\n\nkde_wp_functional_osun.bw <- density(wp_functional_osun_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\n\nplot(kde_wp_functional_osun.bw)\n\n\n\n\nNotice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend).\nNow, we’ll do rescaling for the non-functional waterpoints in Osun.\n\nwp_nonfunctional_osun_ppp.km <- rescale(wp_nonfunctional_osun_ppp, 1000, \"km\")\n\n\nkde_wp_nonfunctional_osun.bw <- density(wp_nonfunctional_osun_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\n\nplot(kde_wp_nonfunctional_osun.bw)"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#fixed-and-adaptive-kde",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#fixed-and-adaptive-kde",
    "title": "Take-home Exercise 1",
    "section": "8.2 Fixed and Adaptive KDE",
    "text": "8.2 Fixed and Adaptive KDE\n\n8.2.1 Computing KDE using Fixed Bandwidth\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of wp_functional_osun_ppp.km and wp_nonfunctional_osun_ppp.km objects is in kilometer, hence the 600m is 0.6km.\n\nkde_wp_functional_osun_600 <- density(wp_functional_osun_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\n\nplot(kde_wp_functional_osun_600)\n\n\n\n\n\nkde_wp_nonfunctional_osun_600 <- density(wp_nonfunctional_osun_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\n\nplot(kde_wp_nonfunctional_osun_600)\n\n\n\n\n\n\n8.2.2 Computing KDE using Adaptive Bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, you will learn how to derive adaptive kernel density estimation by using density.adaptive() of spatstat.\n\nkde_wp_functional_osun_adaptive <- adaptive.density(wp_functional_osun_ppp.km, method=\"kernel\")\n\nplot(kde_wp_functional_osun_adaptive)\n\n\n\n\n\nkde_wp_nonfunctional_osun_adaptive <- adaptive.density(wp_nonfunctional_osun_ppp.km, method=\"kernel\")\n\nplot(kde_wp_nonfunctional_osun_adaptive)\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\nFor functional waterpoints in Osun State:\n\npar(mfrow=c(1,2))\nplot(kde_wp_functional_osun.bw, main = \"Fixed bandwidth Func\")\nplot(kde_wp_functional_osun_adaptive, main = \"Adaptive bandwidth Func\")\n\n\n\n\nFor nonfunctional waterpoints in Osun State:\n\npar(mfrow=c(1,2))\nplot(kde_wp_nonfunctional_osun.bw, main = \"Fixed bandwidth NonFunc\")\nplot(kde_wp_nonfunctional_osun_adaptive, main = \"Adaptive bandwidth NonFunc\")\n\n\n\n\n\n\n8.2.3 Converting KDE Output Into Grid Object\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\ngridded_kde_wp_functional_osun_bw <- as.SpatialGridDataFrame.im(kde_wp_functional_osun.bw)\nspplot(gridded_kde_wp_functional_osun_bw)\n\n\n\n\nFrom the kernal density map generated by gridded_kde_wp_functional_osun_bw, we can tell that the regions with high number of functional water points usually cluster together in certain spots (in the Northern parts of Osun State). These regions are usually in pink, indicating that there are around 15 functional water points at each pink spot.\nFrom the map, there’s only region which has an extremely high number of functional water points. This is highlighted by the yellow spots in the map.\nFrom the map, we can conclude that the South of Osun State does not have many functional water points.\n\ngridded_kde_wp_nonfunctional_osun_bw <- as.SpatialGridDataFrame.im(kde_wp_nonfunctional_osun.bw)\nspplot(gridded_kde_wp_nonfunctional_osun_bw)\n\n\n\n\nFrom the map generated by gridded_kde_wp_nonfunctional_osun_bw, we can tell that there are many non-functional water points in Osun State - even more than the functional water points. The regions with high concentrations (indicated by the pink spots) of non-functional water points tend to be at the centre to Northern parts of Osun State.\n\n8.2.3.1 Converting Gridded Output into Raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\nFunctional waterpoints in Osun State\n\nkde_wp_functional_bw_raster <- raster(gridded_kde_wp_functional_osun_bw)\n\n\nkde_wp_functional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -4.569785e-15, 25.49435  (min, max)\n\n\nNon-functional waterpoints in Osun State\n\nkde_wp_nonfunctional_bw_raster <- raster(gridded_kde_wp_nonfunctional_osun_bw)\n\n\nkde_wp_nonfunctional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -3.965311e-15, 20.49412  (min, max)\n\n\n\n\n8.2.3.2 Assigning Projection Systems\nThe code chunk below will be used to include the CRS information on kde_wp_functional_bw_raster RasterLayer.\n\nprojection(kde_wp_functional_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_wp_functional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -4.569785e-15, 25.49435  (min, max)\n\n\nThe code chunk below will be used to include the CRS information on kde_wp_nonfunctional_bw_raster RasterLayer.\n\nprojection(kde_wp_nonfunctional_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_wp_nonfunctional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -3.965311e-15, 20.49412  (min, max)\n\n\n\n\n\n8.2.3 Visualising The Output In tmap\n\ntm_shape(kde_wp_functional_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\nFrom the map above generated by kde_wp_functional_bw_raster, we can see that there are not many functional water points in Osun State, Nigeria. Most of the functional water points are located in the left Northern parts of Osun State.\n\ntm_shape(kde_wp_nonfunctional_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\nFrom the map above generated by kde_wp_nonfunctional_bw_raster, we can see that there are many non-functional water points in Osun State, Nigeria. Most of the non-functional water points are located in the right Northern parts of Osun State."
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#hypothesis-test-waterpoints-in-osun-state-random-distribution",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#hypothesis-test-waterpoints-in-osun-state-random-distribution",
    "title": "Take-home Exercise 1",
    "section": "11.1 Hypothesis Test: Waterpoints in Osun State Random Distribution",
    "text": "11.1 Hypothesis Test: Waterpoints in Osun State Random Distribution\nThe hypothesis and test are as follows:\nHo = The distribution of functional waterpoints in Osun State, Nigeria are randomly distributed.\nH1= The distribution of functional waterpoints in Osun State, Nigeria are not randomly distributed.\nSignificance level: 95%\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.005.\nIn this section, you will learn how to compute L-function estimation by using Lest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\nL_waterpoint_func = Lest(wp_functional_osun_ppp, correction = \"Ripley\")\nplot(L_waterpoint_func, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n11.1.1 Performing Complete Spatial Randomness Test\n\nL_waterpoint_func.csr <- envelope(wp_functional_osun_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#hypothesis-test-functional-waterpoints-in-osun-state-random-distribution",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#hypothesis-test-functional-waterpoints-in-osun-state-random-distribution",
    "title": "Take-home Exercise 1",
    "section": "11.1 Hypothesis Test: Functional Waterpoints in Osun State Random Distribution",
    "text": "11.1 Hypothesis Test: Functional Waterpoints in Osun State Random Distribution\nThe hypothesis and test are as follows:\nHo = The distribution of functional waterpoints in Osun State, Nigeria are randomly distributed.\nH1= The distribution of functional waterpoints in Osun State, Nigeria are not randomly distributed.\nSignificance level: 95%\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05.\nIn this section, you will learn how to compute L-function estimation by using Lest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\nL_waterpoint_func = Lest(wp_functional_osun_ppp, correction = \"Ripley\")\nplot(L_waterpoint_func, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n11.1.1 Performing Complete Spatial Randomness Test\n\nL_waterpoint_func.csr <- envelope(wp_functional_osun_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\n\n\nplot(L_waterpoint_func.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\nThis picture was used instead as I misplaced my screenshot and could not rerun this in time. However, I actually did run this cell as seen from the picture’s GitHub username. It’s the same GitHub username used in my Netlify link.\n\n\n11.1.2 Analysis Obtained\nAs the L value is greater than its corresponding L(theo) value for all distances, the observed distribution for functional water points in Osun State, Nigeria is geographically concentrated. The L value is above the upper confidence envelop too. The spatial clustering of functional water points observed is statistically significant. At 95% significance level, we reject the null hypothesis which states that the distribution of functional waterpoints in Osun State, Nigeria are randomly distributed.\nThis means that the functional waterpoints in Osun State, Nigeria are NOT randomly distributed."
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#hypothesis-test-non-functional-waterpoints-in-osun-state-random-distribution",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#hypothesis-test-non-functional-waterpoints-in-osun-state-random-distribution",
    "title": "Take-home Exercise 1",
    "section": "11.2 Hypothesis Test: Non-Functional Waterpoints in Osun State Random Distribution",
    "text": "11.2 Hypothesis Test: Non-Functional Waterpoints in Osun State Random Distribution\nThe hypothesis and test are as follows:\nHo = The distribution of non-functional waterpoints in Osun State, Nigeria are randomly distributed.\nH1= The distribution of non-functional waterpoints in Osun State, Nigeria are not randomly distributed.\nSignificance level: 95%\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05.\n\nL_waterpoint_nonfunc = Lest(wp_nonfunctional_osun_ppp, correction = \"Ripley\")\nplot(L_waterpoint_nonfunc, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n11.2.1 Performing Complete Spatial Randomness Test\n\nL_waterpoint_nonfunc.csr <- envelope(wp_nonfunctional_osun_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\n\n\nplot(L_waterpoint_nonfunc.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n11.2.2 Analysis Obtained\nAs the L value is greater than its corresponding L(theo) value for all distances, the observed distribution for non-functional water points in Osun State, Nigeria is geographically concentrated. The L value is above the upper confidence envelop too. The spatial clustering of non-functional water points observed is statistically significant. At 95% significance level, we reject the null hypothesis which states that the distribution of non-functional water points in Osun State, Nigeria are randomly distributed.\nThis means that the non-functional waterpoints in Osun State, Nigeria are NOT randomly distributed."
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#local-colocation-quotients-lclq",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#local-colocation-quotients-lclq",
    "title": "Take-home Exercise 1",
    "section": "12.1 Local Colocation Quotients (LCLQ)",
    "text": "12.1 Local Colocation Quotients (LCLQ)\n\npacman::p_load(sfdep)\n\nWe will perform local colocation quotient analysis to determine if the spatial distribution of functional and non-functional water points are independent from each other.\nIn order to use the local_colocation(A, B, nb, wt, 49) function, we would need to gather the parameters first.\nTo perform the analysis, we will need to bring back our functional and nonfunctional waterpoints in sf dataframe.\nTo get the nb parameter value, we will need to get the sf dataframe of all waterpoints in Osun State, Nigeria.\n\nfunc_nonfunc_wp <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\",\n             \"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\n\nfunc_nonfunc_wp\n\nSimple feature collection with 4809 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 177285.9 ymin: 340054.1 xmax: 290751 ymax: 450859.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 4,809 × 2\n   status_clean                           Geometry\n * <chr>                               <POINT [m]>\n 1 Abandoned/Decommissioned    (260303.8 368418.2)\n 2 Abandoned/Decommissioned      (236239.7 417577)\n 3 Abandoned/Decommissioned    (244631.9 447614.1)\n 4 Abandoned/Decommissioned    (252887.8 432017.8)\n 5 Abandoned/Decommissioned    (202912.5 390196.1)\n 6 Functional but needs repair   (212810 386707.6)\n 7 Functional                  (228798.9 403822.5)\n 8 Functional                  (270497.9 377476.9)\n 9 Functional                    (212202 349210.1)\n10 Functional                  (259331.9 399591.4)\n# … with 4,799 more rows\n\n\nNow, we can pass in the func_nonfunc_wp sf dataframe into the include_self() function to get the nb parameter value.\n\nnb <- include_self(\n  st_knn(st_geometry(func_nonfunc_wp), 6)\n)\n\nWe will proceed to find wt parameter value.\n\nwt <- st_kernel_weights(nb,\n                        func_nonfunc_wp,\n                        \"gaussian\",\n                        adaptive = TRUE)\n\n\nA <- wp_functional$status_clean\n\n\nB <- wp_nonfunctional$status_clean\n\n\nLCLQ <- local_colocation(A, B, nb, wt, 49)\n\n\nLCLQ_wp <- cbind(func_nonfunc_wp, LCLQ)\n\n\ntmap_mode(\"view\")\ntm_shape(osunNGA) + \n  tm_polygons() + \ntm_shape(LCLQ_wp) + \n tm_dots(col = \"Non.Functional\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) + \n  tm_view(set.zoom.limits = c(8,14))\n\n\n\n\n\n\n\ntmap_mode(\"view\")\ntm_shape(osunNGA) + \n  tm_polygons() + \ntm_shape(LCLQ_wp) + \n tm_dots(col = \"p_sim_Non.Functional\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) + \n  tm_view(set.zoom.limits = c(8,14))\n\n\n\n\n\n\n\n# return tmap mode to plot for future visualisations\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#local-colocation-quotients-lclq-statistical-conclusions",
    "href": "Take-home_Ex/Take_home_Ex01/Take-home_Ex01.html#local-colocation-quotients-lclq-statistical-conclusions",
    "title": "Take-home Exercise 1",
    "section": "12.2 Local Colocation Quotients (LCLQ) Statistical Conclusions",
    "text": "12.2 Local Colocation Quotients (LCLQ) Statistical Conclusions\nThe p-value is small (less than 0.05) for some regions in the map generated by p_sim_Non.Functional. This means that the actual colocation quotient is statistically significant. The spatial distribution of functional and non-functional waterpoints in Osun State, Nigeria is not independent from each other.\nWe can tell that in some functional water point regions of Osun State, where the colocation quotient is > 1 (as indicated by dark orange and red spots), we can see that there’s a high likelihood that the non-functional water points exist nearby in the region.\nFor functional water point regions where colocation quotient is < 1 (as indicated by colours lighter than light orange), we can see that there’s a low likelihood that non-functional water points exist nearby in the region.\nFor functional water point regions where colocation quotient is = 1 (as indicated by orange spots), we can see that there’s a good mix of both functional and non-functional water points in the region.\nWe can see that non-functional water points aren’t as prevalent as functional water points in Osun State.\nThere are stronger signs of colocation between functional and non-functional waterpoints towards the leftmost and rightmost regions of Osun State. However for the majority of Osun State, the functional water points have no colocation with non-functional water points. As such, at 95% confidence level, there’s not sufficient evidence to reject the null hypothesis which states that the spatial distribution of functional and non-functional waterpoints in Osun State, Nigeria are independent from each other.\nWe continue to conclude that the spatial distribution of functional and non-functional waterpoints in Osun State, Nigeria are independent from each other."
  }
]